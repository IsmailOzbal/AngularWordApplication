{"version":3,"sources":["webpack:///./src/app/layout/user-info/user-info-routing.module.ts","webpack:///./src/app/layout/user-info/user-info.component.html","webpack:///./src/app/layout/user-info/user-info.component.scss","webpack:///./src/app/layout/user-info/user-info.component.ts","webpack:///./src/app/layout/user-info/user-info.module.ts","webpack:///./src/app/shared/services/change-password.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACc;AACG;AAG1D,IAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,sEAAiB;KAC/B;CACJ,CAAC;AAMF;IAAA;IAAqC,CAAC;IAAzB,qBAAqB;QAJjC,8DAAQ,CAAC;YACN,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SAC1B,CAAC;OACW,qBAAqB,CAAI;IAAD,4BAAC;CAAA;AAAJ;;;;;;;;;;;;AChBlC,0gBAA0gB,gBAAgB,oRAAoR,eAAe,8UAA8U,eAAe,2ZAA2Z,+CAA+C,suBAAsuB,sDAAsD,mrB;;;;;;;;;;;ACAh4E,+DAA+D,+J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AACmB;AAED;AACzB;AACK;AACwC;AAOxF;IAME,2CAA2C;IAC3C,2BAAoB,OAA0B,EAAU,YAA0B,EAAU,cAAqC,EAAU,WAAwB,EAAU,aAA4B;QAAzM,iBAwBC;QAxBmB,YAAO,GAAP,OAAO,CAAmB;QAAU,iBAAY,GAAZ,YAAY,CAAc;QAAU,mBAAc,GAAd,cAAc,CAAuB;QAAU,gBAAW,GAAX,WAAW,CAAa;QAAU,kBAAa,GAAb,aAAa,CAAe;QAHzM,cAAS,GAAG,KAAK,CAAC;QAKhB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACxC;YACE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC3C,EACD;YACE,SAAS,EAAE,SAAS,CAAC,UAAU,EAAE,iBAAiB,CAAC;SACpD,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE7C,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAEpB,IAAI,CAAC,YAAY;aACd,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;aACpB,SAAS,EAAE;aACX,IAAI,CAAC,aAAG;YACP,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACpB,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oCAAQ,GAAR;IAEA,CAAC;IAED,sBAAI,gCAAC;aAAL;YACE,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;QACpC,CAAC;;;OAAA;IAED,0CAAc,GAAd;QAAA,iBAcC;QAbC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAC7B,OAAO;SACR;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACpB,IAAI,CAAC,cAAc;aAChB,cAAc,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC;aACjF,SAAS,EAAE;aACX,IAAI,CAAC,aAAG;YACP,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC;YAChB,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,KAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,mCAAO,GAAP;QACE,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;SACjE;IACH,CAAC;IA7DU,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,sHAAyC;;SAE1C,CAAC;yCAQ6B,6DAAiB,EAAwB,kFAAY,EAA0B,qGAAqB,EAAuB,0DAAW,EAAyB,wDAAa;OAP9L,iBAAiB,CA8D7B;IAAD,wBAAC;CAAA;AA9D6B;AAgEvB,SAAS,SAAS,CAAC,WAAmB,EAAE,mBAA2B;IACxE,OAAO,UAAC,SAAoB;QAC1B,IAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAChD,IAAM,eAAe,GAAG,SAAS,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QAEhE,IAAI,eAAe,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE;YAC/D,gFAAgF;YAChF,OAAO;SACR;QAED,mDAAmD;QACnD,IAAI,OAAO,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,EAAE;YAC3C,eAAe,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;SAChD;aAAM;YACL,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACjC;IACH,CAAC,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9FwC;AACM;AACS;AAC0C;AAC/B;AACA;AACT;AACQ;AAevC;AACoB;AA+B/C;IAAA;IAA6B,CAAC;IAAjB,cAAc;QA9B1B,8DAAQ,CAAC;YACR,YAAY,EAAE,CAAC,sEAAiB,CAAC;YACjC,OAAO,EAAE;gBACP,4DAAY;gBACZ,4DAAgB;gBAChB,iEAAe;gBACf,+EAAqB;gBACrB,2EAAU;gBACV,+DAAa;gBACb,+DAAa;gBACb,gEAAc;gBACd,iEAAe;gBACf,+DAAa;gBACb,kEAAmB;gBACnB,oEAAkB;gBAClB,gEAAc;gBACd,+DAAa;gBACb,iEAAe;gBACf,oEAAkB;gBAClB,sEAAoB;gBACpB,gEAAc;gBACd,iEAAe;gBACf,iEAAe;gBACf,mEAAiB;gBACjB,kEAAgB;gBAChB,sEAAoB;gBACpB,qEAAgB,CAAC,UAAU,CAAC,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aACxD;SAEF,CAAC;OACW,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDgB;AACoB;AACT;AAChB;AAGG;AACE;AACK;AAKhD;IASE,+BAAoB,IAAgB,EAAU,aAA4B;QAAtD,SAAI,GAAJ,IAAI,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAe;QAR1E,WAAM,GAAG;YACP,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,SAAS,GAAI,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC;aAC5D,CAAC;SACH,CAAC;QAEF,SAAI,GAAc,IAAI,qDAAS,EAAE,CAAC;IAC4C,CAAC;IAE/E,8CAAc,GAAd,UAAe,EAAU,EAAE,QAAgB;QACzC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC9B,OAAO,IAAI,CAAC,IAAI;aACf,IAAI,CAAO,oDAAM,CAAC,OAAO,GAAG,yBAAyB,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;aAC9E,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAO,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAE9D,CAAC;IAEO,mCAAG,GAAX,UAAY,OAAe;QACzB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IACpD,CAAC;IAEO,2CAAW,GAAnB,UAAuB,SAAuB,EAAE,MAAU;QAA1D,iBAMC;QANsB,mDAAuB;QAC5C,OAAO,UAAC,KAAU;YAChB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,yBAAyB;YAC/C,KAAI,CAAC,GAAG,CAAI,SAAS,iBAAY,KAAK,CAAC,OAAS,CAAC,CAAC;YAClD,OAAO,+CAAE,CAAC,MAAW,CAAC,CAAC;QACzB,CAAC,CAAC;IACJ,CAAC;IA9BU,qBAAqB;QAHjC,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAU0B,+DAAU,EAAyB,wDAAa;OAT/D,qBAAqB,CA+BjC;IAAD,4BAAC;CAAA;AA/BiC","file":"user-info-user-info-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserInfoComponent } from './user-info.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: UserInfoComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UserInfoRoutingModule  {}\r\n","module.exports = \"<ngx-spinner></ngx-spinner>\\r\\n<div class=\\\"card\\\">\\r\\n  <div class=\\\"card-header\\\">User Information</div>\\r\\n  <div class=\\\"card-body\\\">\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n        <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"ChangePassword()\\\">\\r\\n           <div class=\\\"row\\\">\\r\\n               <div class=\\\"col-md-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                        <label>Name</label>\\r\\n                        <label class=\\\"form-control\\\">{{user.firstName}}</label>\\r\\n                  </div>\\r\\n               </div>\\r\\n\\r\\n               <div class=\\\"col-md-6\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                            <label>Surname</label>\\r\\n                            <label class=\\\"form-control\\\">{{user.lastName}}</label>\\r\\n    \\r\\n                      </div>\\r\\n                </div>\\r\\n           </div>\\r\\n\\r\\n           <div class=\\\"row\\\">\\r\\n               <div class=\\\"col-md-6\\\">\\r\\n                   <div class=\\\"form-group\\\">\\r\\n                       <label>Username</label>\\r\\n                       <label class=\\\"form-control\\\">{{user.username}}</label>\\r\\n                   </div>\\r\\n               </div>\\r\\n           </div>\\r\\n           <hr/>\\r\\n\\r\\n           <div class=\\\"row\\\">\\r\\n               <div class=\\\"col-md-6\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                            <label>Password</label>\\r\\n                            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n                            <div *ngIf=\\\"submitted && f['password'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\r\\n                                <div *ngIf=\\\"f['password'].errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n               </div>\\r\\n\\r\\n               <div class=\\\"col-md-6\\\">\\r\\n                         \\r\\n \\r\\n            <div class=\\\"form-group\\\">\\r\\n                    <label>Confirm Password</label>\\r\\n                    <input type=\\\"password\\\" formControlName=\\\"confirmPassword\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.confirmPassword.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f['confirmPassword'].errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"f['confirmPassword'].errors.required\\\">Confirm Password is required</div>\\r\\n                        <div *ngIf=\\\"f['confirmPassword'].errors.mustMatch\\\">Passwords must match</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n               </div>\\r\\n           </div>\\r\\n\\r\\n\\r\\n    \\r\\n    \\r\\n            <div class=\\\"form-group\\\">\\r\\n                    <button mat-raised-button color=\\\"primary\\\">Password Change</button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n</div>\\r\\n\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC91c2VyLWluZm8vdXNlci1pbmZvLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { LoginService } from 'src/app/shared/services/login.service';\r\nimport { User } from 'src/app/shared/Model/User';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ChangePasswordService } from 'src/app/shared/services/change-password.service';\r\n\r\n@Component({\r\n  selector: 'app-user-info',\r\n  templateUrl: './user-info.component.html',\r\n  styleUrls: ['./user-info.component.scss']\r\n})\r\nexport class UserInfoComponent implements OnInit {\r\n  userId: string;\r\n  user: User;\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n\r\n  // tslint:disable-next-line:max-line-length\r\n  constructor(private spinner: NgxSpinnerService, private loginservice: LoginService, private changePassword: ChangePasswordService, private formBuilder: FormBuilder, private toastrService: ToastrService) {\r\n\r\n    this.registerForm = this.formBuilder.group(\r\n      {\r\n        password: ['', [Validators.required, Validators.minLength(6)]],\r\n        confirmPassword: ['', Validators.required]\r\n      },\r\n      {\r\n        validator: MustMatch('password', 'confirmPassword')\r\n      }\r\n    );\r\n\r\n    this.userId = localStorage.getItem('userid');\r\n\r\n    this.spinner.show();\r\n\r\n    this.loginservice\r\n      .GetUser(this.userId)\r\n      .toPromise()\r\n      .then(res => {\r\n        console.log(res[0]);\r\n        this.user = res[0];\r\n        this.spinner.hide();\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  ChangePassword() {\r\n    this.submitted = true;\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n    this.spinner.show();\r\n    this.changePassword\r\n      .ChangePassword(+localStorage.getItem('userid'), this.registerForm.value.password)\r\n      .toPromise()\r\n      .then(res => {\r\n        this.user = res;\r\n        this.spinner.hide();\r\n        this.Success();\r\n      });\r\n  }\r\n\r\n  Success() {\r\n    if (this.user !== undefined) {\r\n      this.toastrService.success('User password changed succesfully');\r\n    }\r\n  }\r\n}\r\n\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      // return if another validator has already found an error on the matchingControl\r\n      return;\r\n    }\r\n\r\n    // set error on matchingControl if validation fails\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule, MatCardModule, MatIconModule, MatTableModule } from '@angular/material';\r\nimport { StatModule } from '../../shared/modules/stat/stat.module';\r\nimport { UserInfoRoutingModule } from './user-info-routing.module';\r\nimport { UserInfoComponent } from './user-info.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatBottomSheetModule,\r\n  MatDialogModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatOptionModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSnackBarModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n@NgModule({\r\n  declarations: [UserInfoComponent],\r\n  imports: [\r\n    CommonModule,\r\n    NgxSpinnerModule,\r\n    MatDialogModule,\r\n    UserInfoRoutingModule,\r\n    StatModule,\r\n    MatCardModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatOptionModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSliderModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule,\r\n    MatBottomSheetModule,\r\n    FlexLayoutModule.withConfig({ addFlexToParent: false })\r\n  ]\r\n\r\n})\r\nexport class UserInfoModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport swal from 'sweetalert2';\r\nimport { Token } from '../Model/Token';\r\nimport { Global } from '../Model/Global';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { User, UserModel } from '../Model/User';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChangePasswordService {\r\n  header = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' +  localStorage.getItem('token')\r\n    })\r\n  };\r\n\r\n  user: UserModel = new UserModel();\r\n  constructor(private http: HttpClient, private toastrService: ToastrService) { }\r\n\r\n  ChangePassword(id: number, password: string): Observable<User> {\r\n    this.user.id = id;\r\n    this.user.password = password;\r\n    return this.http\r\n    .post<User>(Global.BaseUri + 'password/changepassword', this.user, this.header)\r\n    .pipe(catchError(this.handleError<User>('ChangePassword')));\r\n\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.toastrService.error('Password change error');\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error); // log to console instead\r\n      this.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":""}