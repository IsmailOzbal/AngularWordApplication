{"version":3,"sources":["webpack:///./src/app/layout/submit/submit-routing.module.ts","webpack:///./src/app/layout/submit/submit.component.html","webpack:///./src/app/layout/submit/submit.component.scss","webpack:///./src/app/layout/submit/submit.component.ts","webpack:///./src/app/layout/submit/submit.module.ts","webpack:///./src/app/shared/Model/WordType.ts","webpack:///./src/app/shared/Model/Words.ts","webpack:///./src/app/shared/services/add-word.service.ts","webpack:///./src/app/shared/services/wordtype.service.ts"],"names":[],"mappings":"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","file":"submit-submit-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SubmitComponent } from './submit.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: SubmitComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class SubmitRoutingModule {}\r\n","module.exports = \"<ngx-spinner></ngx-spinner>\\r\\n<div class=\\\"card\\\">\\r\\n  <div class=\\\"card-header\\\">Add Word</div>\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8\\\">\\r\\n         \\r\\n        <form [formGroup]=\\\"wordForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n              <label>Select Word Type:</label>\\r\\n            <select class=\\\"form-control\\\" formControlName=\\\"WordTypeId\\\" placeholder=\\\"Select word type\\\">\\r\\n              <option *ngFor=\\\"let word of wordtypeLists\\\" value=\\\"{{word.id}}\\\">{{ word.type }} </option>\\r\\n            </select>\\r\\n            <button mat-icon-button disabled>\\r\\n                <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\"  (click)=\\\"AddWordType()\\\"  >add</mat-icon>\\r\\n                 <a (click)=\\\"AddWordType()\\\">Word Type</a>\\r\\n            </button>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\"><label>Word</label> <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"Word\\\" /></div>\\r\\n          <div class=\\\"form-group\\\"><button mat-raised-button color=\\\"primary\\\">Word Add</button></div>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC9zdWJtaXQvc3VibWl0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport swal from 'sweetalert2';\r\nimport { Words } from 'src/app/shared/Model/Words';\r\nimport { WordType } from 'src/app/shared/Model/WordType';\r\nimport { WordtypeService } from 'src/app/shared/services/wordtype.service';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { AddWordService } from 'src/app/shared/services/add-word.service';\r\n\r\n@Component({\r\n  selector: 'app-submit',\r\n  templateUrl: './submit.component.html',\r\n  styleUrls: ['./submit.component.scss']\r\n})\r\nexport class SubmitComponent implements OnInit {\r\n  closeResult: string;\r\n  private newWord: Words = new Words();\r\n  wordtypeLists: WordType[] = [];\r\n  submitted = false;\r\n  wordForm: FormGroup;\r\n  heroes: Words;\r\n  Type: string;\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private wordTypeservice: WordtypeService,\r\n    private wordService:  AddWordService ,\r\n    private formBuilder: FormBuilder,\r\n    private spinner: NgxSpinnerService\r\n  ) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.wordForm = this.formBuilder.group({\r\n      WordTypeId: ['', Validators.required],\r\n      Word: ['', Validators.required]\r\n    });\r\n    this.spinner.show();\r\n    this.GetWordType();\r\n  }\r\n\r\n  AddWordType(): void {\r\n  }\r\n  GetWordType(): void {\r\n    this.wordTypeservice\r\n      .getWordTypeList()\r\n      .toPromise()\r\n      .then(res => {\r\n        this.wordtypeLists = res;\r\n        console.log(res);\r\n        this.spinner.hide();\r\n      });\r\n  }\r\n\r\n  onSubmit() {\r\n    // TODO: Use EventEmitter with form value\r\n\r\n    this.submitted = true;\r\n    if (this.wordForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.newWord.id = 0;\r\n    this.newWord.wordTypeId = this.wordForm.value.WordTypeId;\r\n    this.newWord.word = this.wordForm.value.Word;\r\n    this.newWord.userId = localStorage.getItem('userid');\r\n    if (!this.newWord.wordTypeId) {\r\n      swal('WordType Id required');\r\n    }\r\n\r\n    this.wordService\r\n      .AddWord(this.newWord)\r\n      .toPromise()\r\n      .then(res => {\r\n        this.heroes = res;\r\n        this.success();\r\n      });\r\n  }\r\n\r\n  success(): void {\r\n    swal({\r\n      position: 'top-end',\r\n      type: 'success',\r\n      title: 'Word has been saved',\r\n      showConfirmButton: false,\r\n      timer: 1500\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule, MatCardModule, MatIconModule, MatTableModule } from '@angular/material';\r\nimport { StatModule } from '../../shared/modules/stat/stat.module';\r\nimport { SubmitRoutingModule } from './submit-routing.module';\r\nimport { SubmitComponent } from './submit.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatBottomSheetModule,\r\n  MatDialogModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatOptionModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSnackBarModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n@NgModule({\r\n  declarations: [SubmitComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    NgxSpinnerModule,\r\n    MatDialogModule,\r\n    SubmitRoutingModule,\r\n    StatModule,\r\n    MatCardModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatOptionModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSliderModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule,\r\n    MatBottomSheetModule,\r\n    FlexLayoutModule.withConfig({ addFlexToParent: false })\r\n  ]\r\n})\r\nexport class SubmitModule {}\r\n","export class WordType {\r\n  public id: Number;\r\n  public type: string;\r\n}\r\n","export class Words {\r\n public id: Number;\r\n public wordTypeId: number;\r\n public word: string;\r\n public userId: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport swal from 'sweetalert2';\r\nimport { Words } from '../Model/Words';\r\nimport { Global } from '../Model/Global';\r\nimport { WordView } from '../Model/WordView';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AddWordService {\r\n\r\n  header = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' +  localStorage.getItem('token')\r\n    })\r\n  };\r\n  constructor(private http: HttpClient, private toastr: ToastrService) {}\r\n\r\n\r\n  AddWord(word: Words): Observable<Words> {\r\n    return this.http\r\n      .post<Words>(Global.BaseUri + 'word/addword', word , this.header)\r\n      .pipe(catchError(this.handleError<Words>('addHero')));\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.toastr.error('Error adding word');\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error); // log to console instead\r\n      this.log(`${error.statusText}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport swal from 'sweetalert2';\r\nimport { WordType } from '../Model/WordType';\r\nimport { Global } from '../Model/Global';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WordtypeService {\r\n\r\n  header = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' +  localStorage.getItem('token')\r\n    })\r\n  };\r\n\r\n  wordtype: WordType = new WordType();\r\n  constructor(private http: HttpClient, private toastr: ToastrService) {}\r\n\r\n  getWordTypeList(): Observable<WordType[]> {\r\n    return this.http.get<WordType[]>(Global.BaseUri + 'wordtype/getwordtype', this.header)\r\n    .pipe(catchError(this.handleError('getwordtype', [])));\r\n  }\r\n\r\n  AddWordType(hero: string): Observable<WordType> {\r\n    this.wordtype.type = hero;\r\n    return this.http\r\n      .post<WordType>(Global.BaseUri + 'wordtype/addwordtype', this.wordtype, this.header)\r\n      .pipe(catchError(this.handleError<WordType>('addWordType')));\r\n  }\r\n  private log(message: string) {\r\n    this.toastr.error(message);\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error); // log to console instead\r\n      this.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":""}