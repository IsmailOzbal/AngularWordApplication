{"version":3,"sources":["webpack:///./src/app/layout/word-description/word-description-routing.module.ts","webpack:///./src/app/layout/word-description/word-description.component.html","webpack:///./src/app/layout/word-description/word-description.component.scss","webpack:///./src/app/layout/word-description/word-description.component.ts","webpack:///./src/app/layout/word-description/word-description.module.ts","webpack:///./src/app/shared/Model/WordDescription.ts","webpack:///./src/app/shared/Model/WordSentences.ts","webpack:///./src/app/shared/services/language.service.ts","webpack:///./src/app/shared/services/word-description.service.ts","webpack:///./src/app/shared/services/word-sentences.service.ts","webpack:///./src/app/shared/services/word.service.ts"],"names":[],"mappings":"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","file":"word-description-word-description-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { WordDescriptionComponent } from './word-description.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: WordDescriptionComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class WordDescriptionRoutingModule {}\r\n","module.exports = \"<ngx-spinner></ngx-spinner>\\r\\n<div class=\\\"card\\\">\\r\\n  <div class=\\\"card-header\\\">Word Details</div>\\r\\n  <div class=\\\"card-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8\\\">\\r\\n        <form [formGroup]=\\\"wordDetailForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n   \\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Select Word</label>\\r\\n            <select class=\\\"form-control\\\" formControlName=\\\"WordsId\\\" placeholder=\\\"Select word\\\">\\r\\n              <option *ngFor=\\\"let word of wordList\\\" value=\\\"{{word.id}}\\\">{{ word.word }}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Select Language</label>\\r\\n            <select class=\\\"form-control\\\" formControlName=\\\"LanguageTypeId\\\" placeholder=\\\"Select languague\\\"> \\r\\n              <option *ngFor=\\\"let lang of langList\\\" value=\\\"{{lang.id}}\\\">{{lang.key}}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Word Description</label> <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"Description\\\" />\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Word Sample Sentences</label> <textarea type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"SampleSentences\\\"></textarea>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\"><button mat-raised-button color=\\\"primary\\\">Detail Add</button></div>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC93b3JkLWRlc2NyaXB0aW9uL3dvcmQtZGVzY3JpcHRpb24uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport swal from 'sweetalert2';\r\nimport { WordService } from 'src/app/shared/services/word.service';\r\nimport { Words } from 'src/app/shared/Model/Words';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { LanguageService } from 'src/app/shared/services/language.service';\r\nimport { Language } from 'src/app/shared/Model/Language';\r\nimport { WordDescription } from 'src/app/shared/Model/WordDescription';\r\nimport { WordSentences } from 'src/app/shared/Model/WordSentences';\r\nimport { WordDescriptionService } from 'src/app/shared/services/word-description.service';\r\nimport { WordSentencesService } from 'src/app/shared/services/word-sentences.service';\r\n\r\n@Component({\r\n  selector: 'app-word-description',\r\n  templateUrl: './word-description.component.html',\r\n  styleUrls: ['./word-description.component.scss']\r\n})\r\nexport class WordDescriptionComponent implements OnInit {\r\n  wordDetailForm: FormGroup;\r\n  submitted = false;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private wordService: WordService,\r\n    private spinner: NgxSpinnerService,\r\n    private langService: LanguageService,\r\n    private wordDescService: WordDescriptionService,\r\n    private WordSampleSentencesService: WordSentencesService\r\n  ) {}\r\n  wordList: Words[] = [];\r\n  langList: Language[] = [];\r\n  wordDesc: WordDescription = new WordDescription();\r\n  wordSentences: WordSentences = new WordSentences();\r\n\r\n  ngOnInit() {\r\n    this.spinner.show();\r\n    this.wordDetailForm = this.formBuilder.group({\r\n      WordsId: ['', Validators.required],\r\n      LanguageTypeId: ['', Validators.required],\r\n      Description: ['', Validators.required],\r\n      SampleSentences: ['', Validators.required]\r\n    });\r\n    this.GetWord();\r\n    this.GetLang();\r\n  }\r\n\r\n  GetWord() {\r\n    this.wordService\r\n      .getWordList()\r\n      .toPromise()\r\n      .then(res => {\r\n        this.wordList = res;\r\n      });\r\n  }\r\n\r\n  GetLang() {\r\n    this.langService\r\n      .getLangList()\r\n      .toPromise()\r\n      .then(res => {\r\n        this.langList = res;\r\n        this.spinner.hide();\r\n      });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.submitted = true;\r\n\r\n    if (this.wordDetailForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.wordDesc.LanguageTypeId = this.wordDetailForm.value.LanguageTypeId;\r\n    this.wordDesc.WordsId = this.wordDetailForm.value.WordsId;\r\n    this.wordDesc.Description = this.wordDetailForm.value.Description;\r\n\r\n    this.wordSentences.WordId = this.wordDetailForm.value.WordsId;\r\n    this.wordSentences.SampleSentences = this.wordDetailForm.value.SampleSentences;\r\n\r\n    this.AddWordDescription();\r\n  }\r\n\r\n  AddWordDescription() {\r\n    this.spinner.show();\r\n    this.wordDescService\r\n      .AddWordDescription(this.wordDesc)\r\n      .toPromise()\r\n      .then(res => {\r\n        this.AddWordSentences();\r\n      });\r\n  }\r\n\r\n  AddWordSentences() {\r\n    this.WordSampleSentencesService.AddWordSentences(this.wordSentences)\r\n      .toPromise()\r\n      .then(res => {\r\n        this.spinner.hide();\r\n        this.success();\r\n      });\r\n  }\r\n\r\n  success() {\r\n    swal({\r\n      position: 'top-end',\r\n      type: 'success',\r\n      title: 'Word details has been saved',\r\n      showConfirmButton: false,\r\n      timer: 1500\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule, MatCardModule, MatIconModule, MatTableModule } from '@angular/material';\r\nimport { StatModule } from '../../shared/modules/stat/stat.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatBottomSheetModule,\r\n  MatDialogModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatOptionModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSnackBarModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\nimport { WordDescriptionComponent } from './word-description.component';\r\nimport { WordDescriptionRoutingModule } from './word-description-routing.module';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n\r\n@NgModule({\r\n  declarations: [WordDescriptionComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatDialogModule,\r\n    StatModule,\r\n    MatCardModule,\r\n    WordDescriptionRoutingModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatOptionModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSliderModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule,\r\n    MatBottomSheetModule,\r\n    NgxSpinnerModule,\r\n    FlexLayoutModule.withConfig({ addFlexToParent: false })\r\n  ]\r\n})\r\nexport class WordDescriptionModule {}\r\n","export class WordDescription {\r\n  public Id: Number;\r\n  public WordsId: number;\r\n  public LanguageTypeId: number;\r\n  public Description: string;\r\n}\r\n","export class WordSentences {\r\n  public Id: Number;\r\n  public WordId: number;\r\n  public SampleSentences: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport swal from 'sweetalert2';\r\nimport { Language } from '../Model/Language';\r\nimport { Global } from '../Model/Global';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService {\r\n\r\n  header = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' +  localStorage.getItem('token')\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService) {\r\n\r\n  }\r\n\r\n  getLangList(): Observable<Language[]> {\r\n    return this.http.get<Language[]>(Global.BaseUri + 'Language/GetLanguauge', this.header)\r\n    .pipe(catchError(this.handleError('getLangList', [])));\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.toastr.error(message);\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error); // log to console instead\r\n      this.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport swal from 'sweetalert2';\r\nimport { WordDescription } from '../Model/WordDescription';\r\nimport { Global } from '../Model/Global';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WordDescriptionService {\r\n  header = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' +  localStorage.getItem('token')\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService) {}\r\n\r\n  AddWordDescription(wordDesc: WordDescription): Observable<WordDescription> {\r\n\r\n    return this.http\r\n      .post<WordDescription>(Global.BaseUri + 'worddescription/addworddescription', wordDesc, this.header)\r\n      .pipe(catchError(this.handleError<WordDescription>('AddWordDescription')));\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.toastr.error('Error get word description');\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.log(error);\r\n      this.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport swal from 'sweetalert2';\r\nimport { WordSentences } from '../Model/WordSentences';\r\nimport { Global } from '../Model/Global';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WordSentencesService {\r\n  header = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' +  localStorage.getItem('token')\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService) { }\r\n\r\n  AddWordSentences(sentence: WordSentences): Observable<WordSentences> {\r\n\r\n    return this.http\r\n      .post<WordSentences>(Global.BaseUri + 'wordsentences/addsentences', sentence, this.header)\r\n      .pipe(catchError(this.handleError<WordSentences>('AddWordSentences')));\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.toastr.error('Error get word sentences');\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error); // log to console instead\r\n      this.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport swal from 'sweetalert2';\r\nimport { Words } from '../Model/Words';\r\nimport { Global } from '../Model/Global';\r\nimport { WordView } from '../Model/WordView';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WordService {\r\n\r\n  header = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' +  localStorage.getItem('token')\r\n    })\r\n  };\r\n\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService) {}\r\n\r\n  getWordList(): Observable<Words[]> {\r\n    return this.http.get<Words[]>(Global.BaseUri + 'word/getword', this.header).\r\n    pipe(catchError(this.handleError('getWordList', [])));\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.toastr.error('Error get word list');\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error); // log to console instead\r\n      this.log(`${error.statusText}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":""}